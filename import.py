#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Oct 13 16:07:20 2022

@author: beatrizlourenco
"""

# -*- coding: utf-8 -*-
"""mx_NBeats.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q0n39zrZGytPLez5nqg_Z-1mpNsA1OpC

**Reference**:  Richman, Ronald and Wuthrich, Mario V., *Lee and Carter go Machine Learning: Recurrent Neural Networks* (August 22, 2019). Available at SSRN: https://ssrn.com/abstract=3441030 or http://dx.doi.org/10.2139/ssrn.3441030

# Libraries
"""

from numpy.random import seed
import tensorflow as tf
from tensorflow.random import set_seed
import pickle
import os

seed(1)
set_seed(2)

import pandas as pd
import numpy as np
from statsmodels.tsa.arima_model import ARIMA
import matplotlib.pyplot as plt
import random
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
import statsmodels.api as sm
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D
import cvxpy as cp
import pydot
import graphviz

"""# Data Preparation"""


dtPT = pd.read_csv('Dataset/Mx_1x1_alt.txt', header=None, sep='\s+', names=["Year", "Age", "mxf", "mxm",'mxTotal'])


def restructuring_data(raw_data): # adds age, year and gender; joins male and female datasets
    Year = []
    Age = []
    mx = []
    Gender = []
    for year in range(1940, 2020+1):
        dt = (raw_data[raw_data['Year']==year])
        Year.extend((dt['Year'].to_list())*2)
        Age.extend((dt['Age'].to_list())*2)
        mxf = dt['mxf'].to_list()
        mx.extend(mxf)
        mxm = dt['mxm'].to_list()
        mx.extend(mxm)
        female = ['Female']*(len(mxf))
        Gender.extend(female)
        male = ['Male']*(len(mxm))
        Gender.extend(male)
    
    data = pd.DataFrame({ 'Year': Year, 'Age': Age, 'Gender': Gender, 'mx':mx}) 
    data["Age"] = pd.to_numeric(data["Age"], errors='coerce') #change data types
    data = data[data['Age'] < 100.0]
    data["mx"] = pd.to_numeric(data["mx"])
    
    return data


"""**Missing** **Values**"""

def override_missing_values(raw_data, years_wd = 2):
    
    years_wd = 2
    mv_rows = (raw_data[(raw_data['mx'] == 0)]).index
    
    for row in mv_rows:
        age = (raw_data.loc[row])['Age']
        current_year = raw_data.loc[row]['Year']
        gender =  raw_data.loc[row]['Gender']
        df = (raw_data[ (raw_data['Year'] >= (current_year-years_wd) ) & (raw_data['Year'] <= (current_year+years_wd) ) & (raw_data['Age'] == age) & (raw_data['Gender'] == gender) ] )
          
        raw_data.at[row, 'mx'] = df['mx'].mean()
    
    raw_data.loc[mv_rows] #imputed values
    
    raw_data['logmx'] = np.log(raw_data['mx'])
    return raw_data


if __name__ == "__main__":
    dtPT = pd.read_csv('Dataset/Mx_1x1_alt.txt', header=None, sep='\s+', names=["Year", "Age", "mxf", "mxm",'mxTotal'])
    new_data = restructuring_data(dtPT)
    new_data = override_missing_values(new_data, years_wd = 2)
    new_data.to_csv('Dataset/dataPT.csv', index=False)





