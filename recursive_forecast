import pandas as pd
import numpy as np
import preprocessing_transformer as prt


def recursive_forecast_both_genders(raw_data, first_year,last_year, T, tau0, model, enc_out_mask, dec_in_mask, gender = 'Both'):
  ObsYear = 1999 #last obs year

  # first window of T=10 years to predict the first year ( (ObsYear-T) to ObsYear => predicts ObsYear+1):
  mortality = raw_data[(raw_data['Year'] <= ObsYear)].copy()
  mortality = mortality[['Year', 'Age','mx', 'logmx', 'Gender']].copy()

  for  year in range(ObsYear+1, last_year+1): # The next year is recursively predicted 
    mort = mortality[( mortality['Year'] >= (year-T-1))].copy() #selection of only the last T years
    x_mort, y_mort = prt.preprocessing_with_both_genders(mort, T, tau0) 

    l=[]
    for i in range(0,100):
      l.extend([i]*2)

    predicted = pd.DataFrame({ 'Year': ([year]*200), 'Age': l, 
                              'Gender': pd.Categorical((x_mort[1]).tolist()).rename_categories(['Female','Male']) }) 


    # Construction of prediction table for the test set:
    model_pred= model(x_mort) #prediction of the model
    predicted['logmx'] = -model_pred #substitution of real values for predicted ones
    predicted['mx'] = np.exp(-model_pred)

    # Construction of dataframe for the values that we are going to keep for the next iteration
    keep =  pd.DataFrame(mortality.copy())
    mortality= keep.append(predicted)

  prediction = (mortality[( mortality['Year'] >= (first_year)) ].copy())
  if gender in {'Male', 'Female'}:
    prediction = prediction[prediction['Gender'] == gender]
  
  return prediction


